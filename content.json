{"pages":[],"posts":[{"title":"python 기본 문법","text":"1print(&quot;hello, World&quot;) hello, World 주석처리12345# 한줄 주석처리&quot;&quot;&quot;여러 줄 주석 예제 동일한 따옴표(큰 따옴표 혹은 작은 따옴 표) 세 개와 세개 사이는 어떤 내용이 들어가도 주석처리가 된다.&quot;&quot;&quot;print(&quot;Hello&quot;) Hello 변수의 종류12num_int = 1print(type(num_int)) &lt;class 'int'&gt; 12num_float = 0.2print(type(num_float)) &lt;class 'float'&gt; 12bool_true = Trueprint(type(bool_true)) &lt;class 'bool'&gt; 12none_x = Noneprint(type(none_x)) &lt;class 'NoneType'&gt; 논리형 &amp; 비교 연산자 응용12345num1 = int(input(&quot;첫번째 번호 입력&quot;))num2 = int(input(&quot;두번째 번호 입력&quot;))var1 = num1 &gt;= num2print(var1) 첫번째 번호 입력2 두번째 번호 입력2 True String Operators123str1 = &quot;hello &quot;str2 = &quot;world &quot;print(&quot;str1 + str2 = &quot;, str1 + str2) str1 + str2 = hello world 12greet = str1 + str2print('greet * 5 = ', greet *5) greet * 5 = hello world hello world hello world hello world hello world Indexing1234567greeting = &quot;hello Kaggle&quot;print(greeting[:]) # 전체print(greeting[0]) # 0값을 가져옴print(greeting[6:]) # 6부터 끝까지print(greeting[:6]) # 0부터 6까지print(greeting[3:8]) # 3부터 8까지 가져옴print(greeting[0:9:2]) #0부터 9까지 가져오면서 2칸씩 띄우고 가져옴 hello Kaggle h Kaggle hello lo Ka hloKg 리스트123456789a = [] # 빈리스트a_func = list() #list() 함수로도 빈 리스트를 만들 수 있다.b = [1] # 숫자도 요소가 될 수 있다.c = ['apple'] # 문자열도 요소가 될 수 있다.d = [1,2,['apple']] #리스트 안에 리스트를 요소로 넣을 수있다.print(a)print(b)print(c)print(d) [] [1] ['apple'] [1, 2, ['apple']] 123456a = [1, 2, 3]# index [0,1,2]print(a[0]) #첫번째 요소print(a[1]) # 두번째 요소print(a[2]) # 세번째 요소print(a[-1]) 1 2 3 3 123456a = [['apple','banana','cherry']]print(a[0])print(a[0][0]) # 0의 0 인덱스 값print(a[0][0][3]) # 리스트 내의 리스트의 첫번째 문자열 'apple' 중 세번째 인덱스print(a[0][2]) ['apple', 'banana', 'cherry'] apple l cherry 123456789a = [1,2,3,4,5,6,7,8,9,10]b = a[:4] # 인덱스 0부터 3까지c = a[1:4] #인덱스 1부터 3까지d = a[0:7:2] #인덱스 0부터 6까지 인덱스 2칸 건너 띄우기f = a[::2] #리스트 전체구간에서 인덱스 2씩 건너띄우기print(&quot;a[:4] : &quot;,b)print(&quot;a[1:4] : &quot;,c)print(&quot;a[0:7:2] : &quot; , d)print(&quot;a[::2] : &quot;, f) a[:4] : [1, 2, 3, 4] a[1:4] : [2, 3, 4] a[0:7:2] : [1, 3, 5, 7] a[::2] : [1, 3, 5, 7, 9] 12345a = ['alice','bob','cat']b = ['apple','banana','cherry']c = a+bprint(c) ['alice', 'bob', 'cat', 'apple', 'banana', 'cherry'] 리스트 값 수정하기1234a = [0,1,2]a[1] = &quot;b&quot; # 인덱스 1열 수정print(a) [0, 'b', 2] 리스트 값 추가하기123456a = [100,200,300]a.append(400)print(a)a.append([500,600])print(a) [100, 200, 300, 400] [100, 200, 300, 400, [500, 600]] 1234a = [1,2,3]a.extend([40,500])print('a.extend([40,500])result')print(a) a.extend([40,500])result [1, 2, 3, 40, 500] 123456789101112131415a = [0,1,2,3]a[2:2] = [100,200]print(a)# 시작과 끝의 범위 보다 큰 수를 덮어쓰는 예시b = [0,1,2,3]b[1:2] = [100,200,300,400]# 1행에서 1행까지 덮어쓰기print(b)# 시작과 끝의 범위가 작을때의 예시c = [0,1,2,3]c[1:3] = [100] #1행에서 2행까지 덮어쓰기print(c) [0, 1, 100, 200, 2, 3] [0, 100, 200, 300, 400, 2, 3] [0, 100, 3] 리스트 값 삭제하기123456a = [1,2,1,2]#리스트의 첫번째 1이 삭제a.remove(1)print(a) [2, 1, 2] [2, 2] 12345678910a = [0,1,2,3,4,5,6,7,8,9]# 1 삭제del a[1]print(a)b = [0,1,2,3,4,5,6,7,8,9]# 범위로 삭제del b[1:3] #list는 항상 시작하는 인덱스부터 종료하는 n의 n-1까지의 범위를 잡아줍니다.print(b) [0, 2, 3, 4, 5, 6, 7, 8, 9] [0, 3, 4, 5, 6, 7, 8, 9] 123456#인덱스를 지정한 pop()a = [0,1,2,3,4]r = a.pop(1)print(a)print(r) [0, 2, 3, 4] 1 123456# 인덱스를 지정하지 않은 pop()b = ['a','b','c','d']x = b.pop()print(b)print(x) ['a', 'b', 'c'] d 그 외 유용한 메서드12345a = [0,1,2,3]print(a)a.clear()print(a) [0, 1, 2, 3] [] 12a = [&quot;gold&quot;,&quot;gold&quot;,&quot;silver&quot;,&quot;silver&quot;]print(&quot;sliver가 처음 등장하는 인덱스 번호 : &quot; ,a.index(&quot;silver&quot;)) sliver가 처음 등장하는 인덱스 번호 2 12345678a = [1,4,5,2,3]b = [1,4,5,2,3]a.sort()print(&quot;sort() : &quot; ,a) #오름차순b.sort(reverse=True)print(&quot;sort(reverse=True):&quot;,b) #내림차순 sort() : [1, 2, 3, 4, 5] sort(reverse=True): [5, 4, 3, 2, 1] 튜플1234567891011tuple1 =(0) #끝에 콤마(,)를 붙이지 않았을 때tuple2 = (0,) #끝에 콤마(,)를 붙여줬을 때tuple3 = 0,1,2print(tuple1)print(tuple2)print(tuple3)print(type(tuple1)) #콤마(,)를 붙여주지 않으면 튜플이 아닙니다.print(type(tuple2)) #콤마(,)를 붙여주어야 튜플 자료형입니다.print(type(tuple3)) #여러개의 값 일 경우 괄호를 없애주어도 튜플 자료형입니다. 0 (0,) (0, 1, 2) &lt;class 'int'&gt; &lt;class 'tuple'&gt; &lt;class 'tuple'&gt; 더하기 및 곱셈 연산자 사용12345t1 = (0,1,2,3,4)t2 = ('a','b','c')t3 = t1 +t2print(t1+t2)print(t3) (0, 1, 2, 3, 4, 'a', 'b', 'c') (0, 1, 2, 3, 4, 'a', 'b', 'c') 123t1 = ('a','b')print(t1 *0)print(t1 *3) () ('a', 'b', 'a', 'b', 'a', 'b') 딕셔너리1234dic = {'teacher' : &quot;alice&quot;,'class':5,'student' : 15,'list' : [1,2,3]}print(dic['teacher'])print(dic['class'])print(dic['list']) alice 5 [1, 2, 3] 12a = {'name' : 'bob' , 'job' : 'farmer', 'age' : 35}a.keys() #키워드를 찾아주는 메서드 dict_keys(['name', 'job', 'age']) 12a = {'name' : 'bob' , 'job' : 'farmer', 'age' : 35}a.values() #키워드의 정보를 찾아주는 메서드 dict_values(['bob', 'farmer', 35]) 1234a = {'name' : 'cheis', 'job' : 'painter' , 'age' : 30}print(a.get('name'))print(a.get('dinner'))print(a.get('dinner', 'empty')) cheis None empty if조건문12345678910a = -5if a &gt; 5 : print('a ids bigger than 5')elif a &gt; 0 : print(&quot;a is bigger than 0 but a is smaller than 5&quot;)else : print(&quot;a is negative&quot;) a is negative 반복문12for i in range(5) : # 5번 반복 print(&quot;hello World&quot;) hello World hello World hello World hello World hello World 1234567a = &quot;Kaggle&quot;for x in a : # a의 열을 하나씩 반복 print(x) if x == 'g' : #g 나오면 브레이크 break K a g","link":"/2021/11/02/temp211101/"},{"title":"if 중첩문 사용하기","text":"중첩문에 대해 알아보자 123456789x = 15if x &gt;=15 : print('10이상입니다.') if x == 15 : print('15입니다') if x == 20 : print('20입니다.') 10이상입니다. 15입니다 이렇게 들여쓰기가 된 if x == 15 : 와 if x == 20 : 은 처음에 나온 if X &gt;=10 : 에 속한 코드입니다.즉, if x &gt;=10 : 의 조건식이 만족해야 실행하는 코드 사용자가 입력한 값에 if 조건문 사용하기input을 사용하여 사용자가 입력한 값을 변수에 저장하고, if 조건문으로 값을 비교해보자. 12345678x =int(input()) print('당신이 입력한 숫자는',x, '입니다.')if x == 10 : print('10 입니다.')if x == 20 : print('20 입니다,') 10 당신이 입력한 숫자는 10 입니다. 10입니다. 입력 값이 x에 저장되고 if로 x가 10인지 비교한다.여기서는 10을 입력했으므로 ‘10입니다.’가 출력됩니다.","link":"/2021/11/02/temp211102/"}],"tags":[{"name":"python","slug":"python","link":"/tags/python/"}],"categories":[{"name":"python","slug":"python","link":"/categories/python/"}]}